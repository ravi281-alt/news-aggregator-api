Laravel Intro
---------------

What is need of Framework..?
==============================
1. Generic Functionality of code is Readily given by Framework.
   For eg : Login and Registraition functionality is there in each and every web application. 
   So in every framework these functionality are readily availbale to developer along with form 
   validations, that reduces developer time.
   
2. Security
   
   
   
Installation of laravel
=======================
1) Composer Installtion
2) laravel installer installation
3) Creating laravel project
4) Running laravel project

Composer
========
Composer is PHP dependencies installation manager
It helps to download and install external php libraries.

www.getcomposer.org
download setup.exe file from above link.
Like any other software install composer.

Laravel Installer
==================
Composer global require laravel/installer

create project in laravel
=========================
1) Create directory on C drive and name the directory.
2) Navigate to that directory on cmd.
3) Create a laravel project in that directory using following command.
	syntax:
	--------
	composer create-project laravel/laravel projectname "version"
	eg : 
	------
	composer create-project laravel/laravel ecommerce "7.*
	
Running laravel project
=======================
php artisan serve








Model
=====
Model is the representative of database table.

			Model = table
		Number of models = Number of tables in database
		
In framework directory structure model file is stored in app folder.



View
====
View is the html file or frontend where user can interact.
	
					View = UI
					
View are php file contating html code.
These files are stored in resources/views folder

by default laravel had welcome.blade.php view.



Controller
==========

Retrieve data from database table(model) and sending to frontend
or user interface(view)


	table(model)=======>Controller========>UI(View)
	
	Model =============>Controller========>View
	
-> storing data from UI to table
	
	table(model) ===============> Controller =================> UI
	
		Model	 ===============> Controller =================> View

Controller is a middleman or intermediate between model and view to etablish communication between
view and model.

It is a place where bussiness logic and or functionality logic is written.




Routing in Laravel/ Request - Response cycle
=============================================
						Request
					-------------------->
			Client 						  Server
					<--------------------
						Response


	Cleint --> Request  ------> Laravel Server
	^								|
	|								|/	, /index	,	/contact
	|								|
	|								|
	|							Check request 
	|							route in web.php
	|								|
	|								|
	|		404 - Not found			|
	<-------------------------------|					
	|			False				|True
	|								|
	<---------------------------Route function(get,post,put,delete)
	|								|
	|								|
	|								|
	<---------------------------Controller----------------> Model
									


Returning view from route
=========================

1) First create view in view folders with .blade.php extension 
2) Define route to return view as follow.

	Route::get('request', function(){
		
		return view('viewname');
	});




Controller
============

-> Controller is a middleman or intermediate between model and view to etablish communication between
view and model.

-> It is a place where bussiness logic and or functionality logic is written.


Artisan command to create controller
------------------------------------
php artisan make:controller controllername

eg :
php artisan make:controller ProductController

A class in the controller file with the controller name ProductController is created.

1) Calling function from controller

web.php
-------
Route::get('/home', 'ProductController@home');


ProductController.php
---------------------
class ProductController extends Controller
{
    function home(){
        return "<h3>Hello from product controller of home function</h3>";
    }
}



Controller Application
======================

Retrieve data from database table(model) and sending to frontend or user interface(view)

		table(model) ===============> Controller =================> UI
	
		Model	 ===============> Controller =================> View

Data to the view is always passed in the form of key and value.

i.e A variable filled with value is passed to view or HTML.

Since html is a tagging language, it does not have any provision to retrive value iside varable.

Thus framework provides use blade template language which helps us to apply concept of programming 
language in HTML or view.


1) Varaible
2) Reusablity
3) Inheritance => Template Inheritance
4) loop
5) Decision control instruction i.e IF Else.


Varaible in template or html
============================
Variable or key value send by controller to view is retrived as follow.

{{$key}}



Redirection
===========

To redirect user from one page to another page or from one route to another route.
syntax : 
	redirect('url');
	
	
	
	
Blade template language
======================

Need of template language
-> In Dynamic web application always data is passed to the html or view or USER UI.
   So there should be provision of variable to store or hold data on the html to be diplayed to the user.

Programming language concepts that are required in html are:
------------------------------------------------------------

1) Variable
2) loops
3) If else
4) Reusability
5) Template Inheritance


1)Variable
-----------
Data to the view or html is always passed in the form of associative array.[key=>value]
So key is accessed as a variable on the view or html.

syntax:
	{{$variable}}

	xss attack can be prevented by using blade symbols.{{}}

	
2) loops
--------
	<!-- ForEach loop  -->
	@foreach($fruits as $x)
        <p>{{$x}}</p>
    @endforeach


	<!-- For loop -->
    @for($i = 0; $i < 10 ; $i++)
        <p>The Current Value is {{$i}}</p>
    @endfor


3) If else
	
	<!-- If else -->    
    @if(count($fruits) == 1)
        I have one record
    @elseif(count($fruits) > 1)
        I have Multiple record
    @else
        I dont have any record
    @endif


4) Reusability
	
	@include('header')

	@include('footer')
	
	
5) Template Inheritance

	@include('header')

	@yield('main')

	@include('footer')




Start the Project and learn step by step.
========================================


Add Product form
================
1)Product Description
2)Price
3)image to upload
4)Category -> Select
5)Active or Inactive. Ssoftdelete => radiobuttons




Migrations
============

Create table command
--------------------
php artisan make:migration create_products_table

-> create column name inside migration/create_products_table
-> Run the below command
   ---------------------
   php artisan migrate   


Need to create model
--------------------

php artisan make:model product


ticket_id 	-> cuurent_Ticket_id
msg_id	-> 0
user_id	-> current_User_id
event_time	-> IST/PST(current_time)
time_taken	-> 0
event_details	-> Case hit on user screen_user_id
status	-> blank	
original_ticket_id	-> cuurent_Ticket_id
assign_to	-> Can be blank/ or assiged user_id
general_comment	-> blank	
sub_category	-> blank
order_status	-> blank













Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjFBRjQzNjk5RUE0NDlDNkNCRUU3NDZFMjhDODM5NUIyMEE0MUNFMTgiLCJ4NXQiOiJHdlEybWVwRW5HeS01MGJpaklPVnNncEJ6aGciLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FwcC5rZWthLmNvbSIsIm5iZiI6MTY5MTY3MDMzOSwiaWF0IjoxNjkxNjcwMzM5LCJleHAiOjE2OTE3NTY3MzksImF1ZCI6WyJrZWthYXBpIiwiaHR0cHM6Ly9hcHAua2VrYS5jb20vcmVzb3VyY2VzIl0sInNjb3BlIjpbImtla2FhcGkiLCJvcGVuaWQiLCJwcm9maWxlIiwib2ZmbGluZV9hY2Nlc3MiXSwiYW1yIjpbImtla2FhcGkiXSwiY2xpZW50X2lkIjoiMDNkMWU3OWYtZjljNS00YzEwLTk3NTktNmY2Njk4M2YxZDY2Iiwic3ViIjoiODdmOWZjNDctZTVmOS00MDlkLThlOTAtYzFkNjFhMTM5YWMyIiwiYXV0aF90aW1lIjoxNjkxNjcwMzM5LCJpZHAiOiJsb2NhbCJ9.BnMELIHBeHLxj1YwcKfeWFZj1XODgmFhwOyF5O7l0mXAQ9ir7pIwzMCSehvE7nhepfTzYIg4aGVSE-LvKfAO_6Jq9TFMfu7QMoHgfL6u32dmFlaA3yGOZhQQ46TgYyRio1pdmINQ0TM7l2K_IQnJ5M_djD6PMxo_awdAoh_zMxCyY5MRuI_wOpAjDMt9Tw0dcmzCTCUfK6hdenEgk6qqCf97PldZUdc03fmcS5nZXNpD09dylbhOofTMLZeB6QBmT6qu_EzJOea8wiwsrD2B5FsWKgPI0X6GpXWFIJI3jFiX5tgf2oH4WtpChTWtFo8jbU8umLp2sZEhYNS4RLyFfQ










































